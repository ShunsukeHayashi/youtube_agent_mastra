// @ts-nocheck - TypeScript„ÅÆÂûã„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÁÑ°ÂäπÂåñ
import { openai } from '@ai-sdk/openai';
import { createStep } from '@mastra/core';
import { createWorkflow } from '@mastra/core/workflows';
import { z } from 'zod';
import { keywordResearchAgent } from '../agents/keywordResearchAgent';
import { keywordResearchTool } from '../tools/keywordResearch';

const llm = openai('gpt-4');

// „Ç≠„Éº„ÉØ„Éº„Éâ„É™„Çµ„Éº„ÉÅ„Çπ„ÉÜ„ÉÉ„Éó
const researchKeywords = createStep({
  id: 'research-keywords',
  description: 'Research keywords using Keyword Tool API to get search volume and related keywords',
  inputSchema: z.object({
    keyword: z.string().describe('The main keyword to research'),
    location: z.string().default('jp').describe('Location for search metrics (e.g., jp, us)'),
    language: z.string().default('ja').describe('Language for search metrics (e.g., ja, en)'),
    limit: z.number().default(20).describe('Maximum number of results to return'),
    includeRelated: z.boolean().default(true).describe('Whether to include related keywords'),
    source: z.enum(['youtube', 'google', 'amazon', 'bing', 'ebay', 'app-store', 'play-store', 'instagram', 'twitter']).default('youtube').describe('Source platform for keyword research'),
    businessCategory: z.string().optional().describe('Business or industry category'),
    targetAudience: z.string().optional().describe('Description of the target audience'),
  }),
  outputSchema: z.object({
    mainKeyword: z.object({
      keyword: z.string(),
      searchVolume: z.number().nullable(),
      competition: z.string().nullable(),
    }),
    relatedKeywords: z.array(z.object({
      keyword: z.string(),
      searchVolume: z.number().nullable(),
      competition: z.string().nullable(),
    })),
    metadata: z.object({
      apiKeyUsed: z.boolean(),
      timestamp: z.number(),
    }),
  }),
  execute: async ({ context }) => {
    const triggerData = context?.getStepResult<{
      keyword: string,
      location?: string,
      language?: string,
      limit?: number,
      includeRelated?: boolean,
      source?: 'youtube' | 'google' | 'amazon' | 'bing' | 'ebay' | 'app-store' | 'play-store' | 'instagram' | 'twitter',
      businessCategory?: string,
      targetAudience?: string,
    }>('trigger');

    if (!triggerData) {
      throw new Error('Trigger data not found');
    }

    return await keywordResearchTool.execute({
      context: {
        keyword: triggerData.keyword,
        location: triggerData.location || 'jp',
        language: triggerData.language || 'ja',
        limit: triggerData.limit || 20,
        includeRelated: triggerData.includeRelated !== false,
        source: triggerData.source || 'youtube',
      }
    });
  },
});

// „Ç≠„Éº„ÉØ„Éº„ÉâÊà¶Áï•„Éó„É¨„Çº„É≥„ÉÜ„Éº„Ç∑„Éß„É≥„Çπ„ÉÜ„ÉÉ„Éó
const presentKeywordStrategy = createStep({
  id: 'present-keyword-strategy',
  description: 'Present the keyword research results and strategy in a structured format',
  inputSchema: z.object({}),
  outputSchema: z.object({
    keywordStrategy: z.string(),
    metadata: z.object({
      apiKeyUsed: z.boolean(),
      timestamp: z.number(),
    }),
  }),
  execute: async ({ context, mastra }) => {
    const researchResults = context?.getStepResult(researchKeywords);

    if (!researchResults) {
      throw new Error('Keyword research results not found');
    }

    const triggerData = context?.getStepResult<{
      businessCategory?: string,
      targetAudience?: string,
    }>('trigger');

    let businessContext = '';
    if (triggerData?.businessCategory || triggerData?.targetAudience) {
      businessContext = `
„Éì„Ç∏„Éç„Çπ„Ç´„ÉÜ„Ç¥„É™: ${triggerData?.businessCategory || 'ÊåáÂÆö„Å™„Åó'}
„Çø„Éº„Ç≤„ÉÉ„Éà„Ç™„Éº„Éá„Ç£„Ç®„É≥„Çπ: ${triggerData?.targetAudience || 'ÊåáÂÆö„Å™„Åó'}
      `.trim();
    }

    // „É°„Çø„Éá„Éº„Çø„Åã„ÇâËøΩÂä†ÊÉÖÂ†±„ÇíÂèñÂæó
    const { apiKeyUsed, timestamp } = researchResults.metadata;

    const prompt = `‰ª•‰∏ã„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ„É™„Çµ„Éº„ÉÅÁµêÊûú„Çí„ÇÇ„Å®„Å´„ÄÅYouTubeÂãïÁîª„ÅÆSEOÊúÄÈÅ©Âåñ„ÅÆ„Åü„ÇÅ„ÅÆÊà¶Áï•ÁöÑ„Å™„Ç≠„Éº„ÉØ„Éº„ÉâÊèêÊ°à„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑÔºö
      ${JSON.stringify(researchResults, null, 2)}
      
      ${businessContext}
      
      Ê≥®ÊÑè: „Åì„ÅÆ„Éá„Éº„Çø„ÅØ${apiKeyUsed ? 'ÂÆüÈöõ„ÅÆAPI' : '„É¢„ÉÉ„ÇØ„Éá„Éº„Çø'}„Çí‰ΩøÁî®„Åó„Å¶${new Date(timestamp).toLocaleString('ja-JP')}„Å´ÁîüÊàê„Åï„Çå„Åæ„Åó„Åü„ÄÇ
    `;

    // ‰∏ÄÊôÇÁöÑ„Å´„Ç®„Éº„Ç∏„Çß„É≥„Éà„ÅÆ‰ª£„Çè„Çä„Å´„É¢„ÉÉ„ÇØ„Éá„Éº„Çø„ÇíËøî„ÅôÔºàAPI„Ç≠„Éº„ÅåÂøÖË¶Å„Å™„Åü„ÇÅÔºâ
    console.log('„É¢„ÉÉ„ÇØ„Éá„Éº„Çø„Çí‰ΩøÁî®„Åó„Åæ„ÅôÔºàAnthropic API„Ç≠„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åü„ÇÅÔºâ');

    // „É¢„ÉÉ„ÇØ„ÅÆÊà¶Áï•„ÉÜ„Ç≠„Çπ„Éà
    const strategyText = `
## üìä „É°„Ç§„É≥„Ç≠„Éº„ÉØ„Éº„ÉâÂàÜÊûê
- üîç „Äå${researchResults.mainKeyword.keyword}„Äç
  ‚Ä¢ Ê§úÁ¥¢„Éú„É™„É•„Éº„É†: ${researchResults.mainKeyword.searchVolume || '„Éá„Éº„Çø„Å™„Åó'}/Êúà
  ‚Ä¢ Á´∂ÂêàÂ∫¶: ${researchResults.mainKeyword.competition || '‰∏≠'}
  ‚Ä¢ „Éà„É¨„É≥„Éâ: ÂÆâÂÆö

## üîë È´ò„Éú„É™„É•„Éº„É†Èñ¢ÈÄ£„Ç≠„Éº„ÉØ„Éº„ÉâÔºà‰∏ä‰Ωç10‰ª∂Ôºâ
${researchResults.relatedKeywords.slice(0, 10).map((kw, i) =>
      `${i + 1}. „Äå${kw.keyword}„Äç- ${kw.searchVolume || 0}/Êúà`
    ).join('\n')}

## üíé „Éã„ÉÉ„ÉÅ„Ç≠„Éº„ÉØ„Éº„ÉâÔºàÁ´∂Âêà„ÅåÂ∞ë„Å™„ÅÑÔºâ
${researchResults.relatedKeywords
        .filter(kw => kw.competition === 'Low')
        .slice(0, 5)
        .map((kw, i) => `${i + 1}. „Äå${kw.keyword}„Äç- ${kw.searchVolume || 0}/Êúà | Á´∂ÂêàÂ∫¶: ‰Ωé`)
        .join('\n') || 'Á´∂Âêà„ÅåÂ∞ë„Å™„ÅÑ„Ç≠„Éº„ÉØ„Éº„Éâ„ÅØË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ'}

## üéØ Êé®Â•®„Ç≠„Éº„ÉØ„Éº„ÉâÊà¶Áï•
- „É°„Ç§„É≥„Ç≠„Éº„ÉØ„Éº„Éâ: „Äå${researchResults.mainKeyword.keyword}„Äç
- „Çµ„Éù„Éº„Éà„Ç≠„Éº„ÉØ„Éº„Éâ:
  1. „Äå${researchResults.relatedKeywords[0]?.keyword || '„Éá„Éº„Çø„Å™„Åó'}„Äç
  2. „Äå${researchResults.relatedKeywords[1]?.keyword || '„Éá„Éº„Çø„Å™„Åó'}„Äç
  3. „Äå${researchResults.relatedKeywords[2]?.keyword || '„Éá„Éº„Çø„Å™„Åó'}„Äç

## üìã SEOÊúÄÈÅ©Âåñ„Ç¢„Éâ„Éê„Ç§„Çπ
- „Çø„Ç§„Éà„É´„Å∏„ÅÆÁµÑ„ÅøËæº„ÅøÊñπ: „É°„Ç§„É≥„Ç≠„Éº„ÉØ„Éº„Éâ„Çí„Çø„Ç§„Éà„É´„ÅÆÂÖàÈ†≠„Å´ÈÖçÁΩÆ„Åó„ÄÅ„Çµ„Éù„Éº„Éà„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíËá™ÁÑ∂„Å™ÂΩ¢„ÅßÁµÑ„ÅøËæº„ÇÄ
- Ë™¨ÊòéÊñá„Å∏„ÅÆÁµÑ„ÅøËæº„ÅøÊñπ: ÊúÄÂàù„ÅÆ2-3Êñá„Å´„É°„Ç§„É≥„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÂê´„ÇÅ„ÄÅÊÆã„Çä„ÅÆË™¨ÊòéÊñá„Å´„Çµ„Éù„Éº„Éà„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÊï£„Çä„Å∞„ÇÅ„Çã
- „Çø„Ç∞Êà¶Áï•: „É°„Ç§„É≥„Ç≠„Éº„ÉØ„Éº„Éâ„Å®„Çµ„Éù„Éº„Éà„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÂøÖ„Åö„Çø„Ç∞„Å´Âê´„ÇÅ„Çã
- „Çµ„É†„Éç„Ç§„É´ÊúÄÈÅ©Âåñ: „Ç≠„Éº„ÉØ„Éº„Éâ„ÇíË¶ñË¶öÁöÑ„Å´Ë°®Áèæ„Åó„ÄÅÁõÆÁ´ã„Å§„Éá„Ç∂„Ç§„É≥„Å´„Åô„Çã

Ê≥®ÊÑè: „Åì„ÅÆ„Éá„Éº„Çø„ÅØ${apiKeyUsed ? 'ÂÆüÈöõ„ÅÆAPI' : '„É¢„ÉÉ„ÇØ„Éá„Éº„Çø'}„Çí‰ΩøÁî®„Åó„Å¶ÁîüÊàê„Åï„Çå„Åæ„Åó„Åü„ÄÇÂÆüÈöõ„ÅÆÊ§úÁ¥¢„Éú„É™„É•„Éº„É†„Å®„ÅØÁï∞„Å™„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ
    `;

    // Âá∫Âäõ„Çí„Ç≥„É≥„ÇΩ„Éº„É´„Å´Ë°®Á§∫
    console.log(strategyText);

    return {
      keywordStrategy: strategyText,
      metadata: researchResults.metadata,
    };
  },
});

// „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Çπ„ÉÜ„ÉÉ„Éó
const validateKeywordResearchInputStep = createStep({
  id: 'validate-keyword-research-input',
  description: 'Validate input for keyword research',
  inputSchema: z.object({
    keyword: z.string().describe('The main keyword to research'),
    location: z.string().optional().default('jp').describe('Location for search metrics (e.g., jp, us)'),
    language: z.string().optional().default('ja').describe('Language for search metrics (e.g., ja, en)'),
    limit: z.number().optional().default(20).describe('Maximum number of results to return'),
    includeRelated: z.boolean().optional().default(true).describe('Whether to include related keywords'),
    source: z.enum(['youtube', 'google', 'amazon', 'bing', 'ebay', 'app-store', 'play-store', 'instagram', 'twitter']).optional().default('youtube').describe('Source platform for keyword research'),
    businessCategory: z.string().optional().describe('Business or industry category'),
    targetAudience: z.string().optional().describe('Description of the target audience'),
  }),
  outputSchema: z.object({
    isValid: z.boolean(),
    message: z.string().optional(),
    validatedInput: z.object({
      keyword: z.string(),
      location: z.string().optional(),
      language: z.string().optional(),
      limit: z.number().optional(),
      includeRelated: z.boolean().optional(),
      source: z.enum(['youtube', 'google', 'amazon', 'bing', 'ebay', 'app-store', 'play-store', 'instagram', 'twitter']).optional(),
      businessCategory: z.string().optional(),
      targetAudience: z.string().optional(),
    }).optional(),
  }),
  execute: async ({ context }) => {
    const input = context?.getStepResult('trigger');

    if (!input) {
      return {
        isValid: false,
        message: 'Input data not found',
      };
    }

    if (!input.keyword) {
      return {
        isValid: false,
        message: 'Keyword is required',
      };
    }

    return {
      isValid: true,
      validatedInput: input,
    };
  },
});

// Êñ∞„Åó„ÅÑ„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂÆöÁæ©
const keywordResearchWorkflow = createWorkflow({
  id: 'keyword-research-workflow',
  description: 'Research keywords using Keyword Tool API and generate strategic keyword recommendations',
  inputSchema: z.object({
    keyword: z.string().describe('The main keyword to research'),
    location: z.string().optional().default('jp').describe('Location for search metrics (e.g., jp, us)'),
    language: z.string().optional().default('ja').describe('Language for search metrics (e.g., ja, en)'),
    limit: z.number().optional().default(20).describe('Maximum number of results to return'),
    includeRelated: z.boolean().optional().default(true).describe('Whether to include related keywords'),
    source: z.enum(['youtube', 'google', 'amazon', 'bing', 'ebay', 'app-store', 'play-store', 'instagram', 'twitter']).optional().default('youtube').describe('Source platform for keyword research'),
    businessCategory: z.string().optional().describe('Business or industry category'),
    targetAudience: z.string().optional().describe('Description of the target audience'),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    message: z.string(),
    result: z.object({
      mainKeyword: z.object({
        keyword: z.string(),
        searchVolume: z.number().nullable(),
        competition: z.string().nullable(),
      }),
      relatedKeywords: z.array(z.object({
        keyword: z.string(),
        searchVolume: z.number().nullable(),
        competition: z.string().nullable(),
      })),
      metadata: z.object({
        apiKeyUsed: z.boolean(),
        timestamp: z.number(),
      }),
      keywordStrategy: z.string(),
    }).optional(),
  }),
})
  .then(validateKeywordResearchInputStep)
  .then(researchKeywords)
  .then(presentKeywordStrategy);

// „ÉØ„Éº„ÇØ„Éï„É≠„Éº„Çí„Ç≥„Éü„ÉÉ„Éà
keywordResearchWorkflow.commit();

export { keywordResearchWorkflow };